name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_vector.txt
        pip install -r requirements-dev.txt

    - name: 🎭 Install Playwright
      run: |
        python -m playwright install --with-deps chromium

    - name: 🔍 Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: 🎨 Check code formatting with black
      run: |
        black --check src/

    - name: 📊 Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports

    - name: 🧪 Run tests
      run: |
        pytest tests/ -v --cov=src/ --cov-report=xml

    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build scraper image
      run: |
        docker build -f docker/Dockerfile -t web-scraper:test .

    - name: 🏗️ Build vectorizer image
      run: |
        docker build -f docker/Dockerfile.vector -t vectorizer:test .

    - name: 🏗️ Build chatbot image
      run: |
        docker build -f docker/Dockerfile.chatbot -t chatbot:test .

    - name: 🧪 Test Docker Compose
      run: |
        docker-compose -f docker-compose.complete.yml config

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: 🔍 Run safety check
      run: |
        pip install safety
        safety check -r requirements_vector.txt

    - name: 🔐 Run bandit security scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true

    - name: 📊 Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json
