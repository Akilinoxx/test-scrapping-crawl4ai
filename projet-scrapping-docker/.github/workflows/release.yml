name: üè∑Ô∏è Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: üöÄ Create Release
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: üèóÔ∏è Build package
      run: |
        python -m build

    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîë Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: üè∑Ô∏è Extract version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: üê≥ Build and push Docker images
      run: |
        # Build and push scraper
        docker build -f docker/Dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/web-scraper:${{ steps.version.outputs.VERSION }} .
        docker build -f docker/Dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/web-scraper:latest .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/web-scraper:${{ steps.version.outputs.VERSION }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/web-scraper:latest

        # Build and push vectorizer
        docker build -f docker/Dockerfile.vector -t ${{ secrets.DOCKERHUB_USERNAME }}/vectorizer:${{ steps.version.outputs.VERSION }} .
        docker build -f docker/Dockerfile.vector -t ${{ secrets.DOCKERHUB_USERNAME }}/vectorizer:latest .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/vectorizer:${{ steps.version.outputs.VERSION }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/vectorizer:latest

        # Build and push chatbot
        docker build -f docker/Dockerfile.chatbot -t ${{ secrets.DOCKERHUB_USERNAME }}/ai-chatbot:${{ steps.version.outputs.VERSION }} .
        docker build -f docker/Dockerfile.chatbot -t ${{ secrets.DOCKERHUB_USERNAME }}/ai-chatbot:latest .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/ai-chatbot:${{ steps.version.outputs.VERSION }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/ai-chatbot:latest

    - name: üìù Generate changelog
      id: changelog
      run: |
        # Simple changelog generation
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: üéâ Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        release_name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          ## üöÄ What's New in ${{ steps.version.outputs.VERSION }}

          ${{ steps.changelog.outputs.CHANGELOG }}

          ## üê≥ Docker Images
          - `${{ secrets.DOCKERHUB_USERNAME }}/web-scraper:${{ steps.version.outputs.VERSION }}`
          - `${{ secrets.DOCKERHUB_USERNAME }}/vectorizer:${{ steps.version.outputs.VERSION }}`
          - `${{ secrets.DOCKERHUB_USERNAME }}/ai-chatbot:${{ steps.version.outputs.VERSION }}`

          ## üì¶ Installation
          ```bash
          git clone https://github.com/${{ github.repository }}.git
          cd web-scraping-ai-chatbot
          git checkout ${{ steps.version.outputs.VERSION }}
          ```

          ## üê≥ Quick Start with Docker
          ```bash
          docker-compose up -d
          ```

          See the [Installation Guide](docs/INSTALLATION.md) for detailed instructions.
        draft: false
        prerelease: false

    - name: üì¶ Upload build artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/
        asset_name: python-package
        asset_content_type: application/zip
